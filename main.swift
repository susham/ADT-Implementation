//
//  Client.swift
//  Assignment
//
//  Created by Group 8(Susham,Haritha,Rohan) on 11/27/17.
//  Copyright Â© 2017 Group 8(Susham,Haritha,Rohan). All rights reserved.
//

import Foundation

/*************************************************LinkedListImplementation*********************************************/

    //creating empty Dictionary object by providing value type of the dictionary
    var dict = Dict<(Int,Bool)>()
    var key: String="";
    var value: (Int, Bool)
    
    //Testing code for Dictionary Insert, for each i value 2i 'a's are generated as key and if the i value is even, then the dictionary value will be a tuple(i,true) else (i,false)
    for i in 1..<500
    {
        key="";
        for _ in 1...i
        {
            key+="aa"
        }
        if i % 2 == 0
        {
            value=(i,true)
        }
        else {
            value=(i,false)
        }
        dict.insert(key:key,value:value);
        
    }

    
    // Testing code for "Lookup" function, which searches for keys that are generated by the following condition:
    // for every i,key generated will be 3i 'a'
    for i in 1..<333
    {
        key="";
        for _ in 1...i
        {
            key+="aaa"
        }
        let searchresult = dict.lookup(key:key);
        print("Value for searched key is:",searchresult as Any)
        
    }

    //counter function which calcualtes the number of values whose boolean value is true.
    func counter(acc: Int,key:String,value:(Int,Bool)) -> (Int) {
        var count:Int=acc;
        if(value.1 == true){
            count=count+1;
            
        }
        return count;
    }

    //higher order fold function passing the counter function as a parameter
    var value_count=dict.fold(acc: 0,function:counter);
    print("Nodes with bool value as true:",value_count)
    print("\n\n")

/************************************************HashImplementation*******************************************************/

    //creating empty Dictionary object for hash table implementaion by providing value type of the dictionary and the capacity for the hash table.
    var hashDict = HashDict<(Int,Bool)>(capacity: 1000)

    //Testing code for Dictionary Insert, for each i value 2i 'a's are generated as key and if the i value is even, then the dictionary value will be a tuple(i,true) else (i,false)
    var Key: String="";
    var Value: (Int, Bool)

    for i in 1..<500
    {
        key="";
        for _ in 1...i
        {
            Key+="aa"
        }
        if i % 2 == 0
        {
            Value=(i,true)
        }
        else {
            Value=(i,false)
        }
        do{
            try hashDict.insert(key:Key,value:Value);
        }
        catch HashTableError.hashTableFull{
            print("Hash table is full")
        }
        
    }

    // Testing code for "Lookup" function, which searches for keys that are generated by the following condition: for every i,key generated will be 3i 'a'
    for i in 1..<333
    {
        key="";
        for _ in 1...i
        {
            key+="aaa"
        }
        do{
            let hashSearchResult = try hashDict.lookup(key:key);
            print("Value for searched key is:", hashSearchResult as Any)
        }
        catch {
            print("Array index out of bounds")
        }
    }

    //higher order fold function passing the counter function as parameter
    var hashValue_count=hashDict.fold(acc: 0,function:counter);
    print("Nodes with bool value as true:",hashValue_count)



